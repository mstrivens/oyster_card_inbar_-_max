User story - top_up

In order to keep using public transport
As a customer
I want to add money to my card

customer          add_money
card              top_up

Write up a plan for how you will interact with your code and manually test in IRB.
Create new card instance
Check the balance
Top-up card by £10
Return balance again (should be £10)

Write a test for the top_up method
Make sure the test fails before implementing the method
Implement the method to make the test pass


User story - max balance

In order to protect my money from theft or loss
As a customer
I want a maximum limit (of £90) on my card

MAX_BALANCE = 90

Throw error if top_up would bring balance balance above max

 Write up a plan for how you will interact with your code and manually test in IRB.
 Write a test that checks the top_up method throws an exception if the new balance would exceed the limit.
 Use a constant to store the limit
 Implement the limit in the top_up method. Use an inline if statement to check if the limit would be exceeded
 Make the error message include the limit value
 Use interpolation to keep your code DRY


 User story - deduct

In order to pay for my journey
As a customer
I need my fare deducted from my card

fare              charged?
card              deduct_fare

Write up a plan for how you will interact with your code and manually test in IRB.
card.top_up(10)
card.balance => 10
card.deduct(5)
card.balance => 5
Write a test for the deduct method, see it fail
Implement the method, see the test pass
